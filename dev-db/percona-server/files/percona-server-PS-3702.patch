From 64867604216390323f723183df66c346b3f50108 Mon Sep 17 00:00:00 2001
From: Satya Bodapati <satya.bodapati@percona.com>
Date: Fri, 15 Jun 2018 12:08:06 +0530
Subject: [PATCH] PS-3702: LP#1690588: ALTER TABLE is slow in 5.7 when the
 number of dirty pages is high

Problem:
--------
ALTER TABLE ADD INDEX in 5.7 uses bottom-up index build(BulkInsert).
It skips redo logging and flushes all dirty pages dirtied by ALTER.
FlushObserver is used which flushes and waits until dirty pages
are flushed and written to disk.

There are two iterations of flush list as part of ALTER:
1. For PFS monitoring, an estimate of dirty pages is required.
   (buf_flush_get_dirty_pages_count())
2. To do the actual flushing of dirty pages of ALTER

When there are lot of dirty pages, this iteration takes significant
amount of time.

Fix:
----
1. Remove one iteration of flush list of all buffer pool instances.
   i.e the iteration used for estimate.

2. Note the LSN at which Observer is created. When mtr commits
   with an Observer, as part of commit, dirty pages
   are added to flush list. Count the dirty pages that are dirted
   before Observer (newest_modification < observer_lsn) and also
   the new blocks that are dirtied. This count serves
   as a very good estimate

3. Make buf_flush_get_dirty_pages_count() debug only function.
   This is no longer required in release builds.
---
 storage/innobase/buf/buf0flu.cc     | 21 +++++++++++++++++----
 storage/innobase/include/buf0flu.h  | 20 ++++++++++++++++++++
 storage/innobase/include/buf0flu.ic |  4 ++++
 3 files changed, 41 insertions(+), 4 deletions(-)

diff --git a/storage/innobase/buf/buf0flu.cc b/storage/innobase/buf/buf0flu.cc
index 90cc4737fc8..4d7947ef54b 100644
--- a/storage/innobase/buf/buf0flu.cc
+++ b/storage/innobase/buf/buf0flu.cc
@@ -3819,6 +3819,7 @@ buf_flush_validate(
 #endif /* UNIV_DEBUG || UNIV_BUF_DEBUG */
 #endif /* !UNIV_HOTBACKUP */
 
+#ifdef UNIV_DEBUG
 /******************************************************************//**
 Check if there are any dirty pages that belong to a space id in the flush
 list in a particular buffer pool.
@@ -3880,6 +3881,7 @@ buf_flush_get_dirty_pages_count(
 
 	return(count);
 }
+#endif /* UNIV_DEBUG */
 
 /** FlushObserver constructor
 @param[in]	space_id	table space id
@@ -3895,7 +3897,9 @@ FlushObserver::FlushObserver(
 	m_space_id(space_id),
 	m_trx(trx),
 	m_stage(stage),
-	m_interrupted(false)
+	m_interrupted(false),
+	m_estimate(),
+	m_lsn(log_get_lsn())
 {
 	m_flushed = UT_NEW_NOKEY(std::vector<ulint>(srv_buf_pool_instances));
 	m_removed = UT_NEW_NOKEY(std::vector<ulint>(srv_buf_pool_instances));
@@ -3987,9 +3991,7 @@ FlushObserver::flush()
 		buf_remove = BUF_REMOVE_FLUSH_WRITE;
 
 		if (m_stage != NULL) {
-			ulint	pages_to_flush =
-				buf_flush_get_dirty_pages_count(
-					m_space_id, this);
+			ulint	pages_to_flush = get_estimate();
 
 			m_stage->begin_phase_flush(pages_to_flush);
 		}
@@ -4006,3 +4008,14 @@ FlushObserver::flush()
 		}
 	}
 }
+
+/** Increase the estimate of dirty pages by this observer
+@param[in]	block		buffer pool block */
+void
+FlushObserver::inc_estimate(const buf_block_t*	block)
+{
+	if (block->page.oldest_modification == 0
+	    || block->page.newest_modification < m_lsn) {
+		os_atomic_increment_ulint(&m_estimate, 1);
+	}
+}
diff --git a/storage/innobase/include/buf0flu.h b/storage/innobase/include/buf0flu.h
index 60a544b1ca9..50a18bcc39f 100644
--- a/storage/innobase/include/buf0flu.h
+++ b/storage/innobase/include/buf0flu.h
@@ -314,6 +314,7 @@ buf_flush_ready_for_flush(
 	buf_flush_t	flush_type)/*!< in: type of flush */
 	MY_ATTRIBUTE((warn_unused_result));
 
+#ifdef UNIV_DEBUG
 /******************************************************************//**
 Check if there are any dirty pages that belong to a space id in the flush
 list in a particular buffer pool.
@@ -332,6 +333,7 @@ buf_flush_get_dirty_pages_count(
 /*============================*/
 	ulint		id,		/*!< in: space id to check */
 	FlushObserver*	observer);	/*!< in: flush observer to check */
+#endif /* UNIV_DEBUG */
 
 /*******************************************************************//**
 Signal the page cleaner to flush and wait until it and the LRU manager clean
@@ -400,6 +402,17 @@ class FlushObserver {
 	void notify_remove(
 		buf_pool_t*	buf_pool,
 		buf_page_t*	bpage);
+
+	/** Increase the estimate of dirty pages by this observer
+	@param[in]	block		buffer pool block */
+	void inc_estimate(const buf_block_t*	block);
+
+	/** @return estimate of dirty pages to be flushed */
+	ulint get_estimate() const {
+		os_rmb;
+		return(m_estimate);
+	}
+
 private:
 	/** Table space id */
 	ulint			m_space_id;
@@ -422,6 +435,13 @@ class FlushObserver {
 
 	/* True if the operation was interrupted. */
 	bool			m_interrupted;
+
+	/* Estimate of pages to be flushed */
+	ulint			m_estimate;
+
+	/** LSN at which observer started observing. This is
+	used to find the dirty blocks that are dirtied before Observer */
+	const lsn_t		m_lsn;
 };
 
 #endif /* !UNIV_HOTBACKUP */
diff --git a/storage/innobase/include/buf0flu.ic b/storage/innobase/include/buf0flu.ic
index d092a276f8d..e95921fc4ec 100644
--- a/storage/innobase/include/buf0flu.ic
+++ b/storage/innobase/include/buf0flu.ic
@@ -82,6 +82,10 @@ buf_flush_note_modification(
 	mutex_enter(&block->mutex);
 
 	ut_ad(block->page.newest_modification <= end_lsn);
+	if (observer != NULL) {
+		observer->inc_estimate(block);
+	}
+
 	block->page.newest_modification = end_lsn;
 
 	/* Don't allow to set flush observer from non-null to null,
